#!/usr/bin/env bash

# Simple wrapper for Devin-like commands in Codespaces

REPO_PATH="/workspaces/LingoLinq-AAC"
CLAUDE_CMD="claude" # Update if using a different alias
GEMINI_CMD="gemini-cli"  # Update if needed

case "$1" in
  review)
    echo "🔥 Roasting commits from $2 with style: $4..."
    git log "$2" --oneline | while read -r line; do
      COMMIT_HASH=$(echo "$line" | awk '{print $1}')
      MESSAGE=$(echo "$line" | cut -d' ' -f2-)
      echo "🧠 Roasting $COMMIT_HASH: $MESSAGE"
      $CLAUDE_CMD "Give a roast-style code review of commit message: $MESSAGE"
    done
    ;;

  deepwiki)
    DEEPWIKI_URL="${2:-https://deepwiki.com/swahlquist/LingoLinq-AAC}"
    shift $(( $# > 1 ? 1 : 0 ))
    echo "🗂️ Aggregating DeepWiki for $DEEPWIKI_URL ..."
    npx --yes mcp-deepwiki "$DEEPWIKI_URL" --mode aggregate ${@:2}
    ;;

  export)
    if [[ "$2" == "wiki" ]]; then
      echo "📦 Exporting DeepWiki as markdown..."
      $GEMINI_CMD "Extract the DeepWiki contents from the current repo and convert them to markdown for offline sharing."
    else
      echo "❌ Unsupported export target."
    fi
    ;;

  analyze)
    if [[ "$2" == "repo" ]]; then
      echo "🔍 Analyzing repo architecture and dependencies..."
      $CLAUDE_CMD "Give me an architecture summary of the current repo including major modules, hotspots, and legacy code risks."
    else
      echo "❌ Unsupported analyze target."
    fi
    ;;

  *)
    echo "Usage: devin [review|export|analyze|deepwiki] <args>"
    ;;
esac
